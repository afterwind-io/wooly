export abstract class CanvasTreeItem {
  public children: CanvasTreeItem[] = [];
  public parent: CanvasTreeItem | null = null;
  public sibling: CanvasTreeItem | null = null;
  public siblingIndex: number = 0;

  public ignorePointer: boolean = false;

  protected isFreezed: boolean = false;

  private zIndex: number = 0;
  private freezedZIndex: number = 0;

  public get child(): CanvasTreeItem | null {
    return this.children[0] || null;
  }

  public get ZIndex(): number {
    if (this.isFreezed) {
      return this.freezedZIndex;
    }

    if (this.parent == null) {
      return this.zIndex;
    } else {
      return this.parent.ZIndex + this.zIndex;
    }
  }

  public abstract $Draw(ctx: CanvasRenderingContext2D): void;

  /**
   * 冻结所有递归求值字段的值
   *
   * @memberof CanvasTreeItem
   */
  public $Freeze() {
    this.freezedZIndex = this.ZIndex;

    this.isFreezed = true;
  }

  public $Melt() {
    this.isFreezed = false;
  }

  public AddChild(item: CanvasTreeItem) {
    item.parent = this;

    const lastChild = this.children[this.children.length - 1];
    if (lastChild) {
      lastChild.sibling = item;
      item.siblingIndex = lastChild.siblingIndex + 1;
    } else {
      item.siblingIndex = 0;
    }

    this.children.push(item);

    GlobalEvents.Emit("OnTreeChange", item, "insert");
  }

  public RemoveChild(item: CanvasTreeItem) {
    const index = this.children.findIndex(c => c === item);
    if (index === -1) {
      return;
    }
    this.children.splice(index, 1);

    const nextSibling = item.sibling;
    const lastSibling = this.children[index - 1];
    if (lastSibling) {
      lastSibling.sibling = nextSibling;
    }
    item.sibling = null;

    GlobalEvents.Emit("OnTreeChange", item, "delete");
  }

  public Traverse(cb: (node: CanvasTreeItem) => void | boolean) {
    let path = new LinkedList<CanvasTreeItem>();
    let next: CanvasTreeItem | null = this;

    while (true) {
      const skip = cb(next);

      if (path.Peek() === next) {
        path.Pop();
      } else if (!skip && next.child) {
        path.Push(next);
        next = next.child;
        continue;
      }

      while (true) {
        if (next === this) {
          return;
        }

        if (next!.sibling != null) {
          next = next!.sibling;
          break;
        }

        next = next!.parent;
      }
    }
  }
}

const GetPath = (item: CanvasTreeItem): CanvasTreeItem[] => {
  const path = [item];

  let i: CanvasTreeItem | null = item;
  while ((i = i.parent)) {
    path.unshift(i);
  }

  return path;
};

const RenderPriorityComparator: BSTValueComparator<CanvasTreeItem> = (
  v1: CanvasTreeItem,
  v2: CanvasTreeItem
) => {
  if (v1.ZIndex > v2.ZIndex) {
    return -1;
  } else if (v1.ZIndex < v2.ZIndex) {
    return 1;
  }

  const v1Path = GetPath(v1);
  const v2Path = GetPath(v2);
  const length = Math.max(v1Path.length, v2Path.length);

  let v1A = v1;
  let v2A = v2;
  for (let i = 0; i < length; i++) {
    const v1Item = v1Path[i];
    const v2Item = v2Path[i];

    if (v1Item === void 0) {
      return 1;
    } else if (v2Item === void 0) {
      return -1;
    }

    v1A = v1Item;
    v2A = v2Item;

    if (v1Item !== v2Item) {
      break;
    }
  }

  if (v1A.siblingIndex > v2A.siblingIndex) {
    return -1;
  } else if (v1A.siblingIndex < v2A.siblingIndex) {
    return 1;
  }

  return 0;
};

class _CanvasTree {
  private tree: BST<CanvasTreeItem> = new RBTree(RenderPriorityComparator);

  public constructor() {
    GlobalEvents.Connect("OnTreeChange", this.OnTreeChange, this);
  }

  public Draw(ctx: CanvasRenderingContext2D) {
    this.tree.InorderTraverse((node: CanvasTreeItem) => {
      node.$Draw(ctx);
    });
  }

  public Rebuild(root: CanvasTreeItem) {
    this.tree = new RBTree(RenderPriorityComparator);

    root.Traverse((node: CanvasTreeItem) => {
      this.tree.Insert(node);
    });
  }

  public Traverse(handler: (value: CanvasTreeItem) => void) {
    this.tree.InorderTraverse(handler);
  }

  private DeleteNode(node: CanvasTreeItem) {
    this.tree.Delete(node);
  }

  private InsertNode(node: CanvasTreeItem) {
    // TODO
    node.Traverse(n => {
      this.tree.Insert(n);
    });
  }

  private OnTreeChange(node: CanvasTreeItem, type: "insert" | "delete") {
    if (type === "delete") {
      this.DeleteNode(node);
    } else {
      this.InsertNode(node);
    }
  }
}
